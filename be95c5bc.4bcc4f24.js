(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{106:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return d}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var m=o.a.createContext({}),s=function(e){var n=o.a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=s(e.components);return o.a.createElement(m.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),l=s(t),b=r,d=l["".concat(i,".").concat(b)]||l[b]||u[b]||a;return t?o.a.createElement(d,c(c({ref:n},m),{},{components:t})):o.a.createElement(d,c({ref:n},m))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=b;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var m=2;m<a;m++)i[m]=t[m];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},178:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/vs-code-snippets-demo-0cadcf0d99a274246e4001b0ae7d00f3.gif"},94:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return s}));var r=t(2),o=t(6),a=(t(0),t(106)),i={title:"VS Code Snippets"},c={unversionedId:"vs-code-snippets/snippets",id:"vs-code-snippets/snippets",isDocsHomePage:!1,title:"VS Code Snippets",description:"We have compiled a collection of useful templates in the form of",source:"@site/docs/vs-code-snippets/snippets.md",slug:"/vs-code-snippets/snippets",permalink:"/AzureML-CheatSheet/docs/vs-code-snippets/snippets",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/vs-code-snippets/snippets.md",version:"current"},p=[{value:"Basic core imports",id:"basic-core-imports",children:[]},{value:"Pipeline Imports",id:"pipeline-imports",children:[]},{value:"Create AML Workspace from config",id:"create-aml-workspace-from-config",children:[]},{value:"Create AML Workspace from config and auth",id:"create-aml-workspace-from-config-and-auth",children:[]},{value:"Register Azure Blob Container From SAS",id:"register-azure-blob-container-from-sas",children:[]},{value:"Create Compute Cluster with SSH",id:"create-compute-cluster-with-ssh",children:[]},{value:"AML Template Script Run Config",id:"aml-template-script-run-config",children:[]},{value:"AML Template Estimator",id:"aml-template-estimator",children:[]},{value:"Environment-From-Pip",id:"environment-from-pip",children:[]},{value:"Environment-From-Conda-Spec",id:"environment-from-conda-spec",children:[]},{value:"Environment-From-Conda-Existing",id:"environment-from-conda-existing",children:[]},{value:"Environment",id:"environment",children:[]}],m={rightToc:p};function s(e){var n=e.components,i=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},m,i,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"We have compiled a collection of useful templates in the form of\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://code.visualstudio.com/docs/editor/userdefinedsnippets"}),"VS code snippets"),"."),Object(a.b)("p",null,Object(a.b)("img",{alt:"VS Code Snippets",src:t(178).default})),Object(a.b)("p",null,"To add these snippets to your VS Code: ",Object(a.b)("inlineCode",{parentName:"p"},"ctrl+shift+p"),' > Type "Configure user\nsnippets" > Select ',Object(a.b)("inlineCode",{parentName:"p"},"python.json"),". All of these snippets are available here:\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/aminsaied/AzureML-CheatSheet/blob/master/snippets.json"}),"python.json")),Object(a.b)("h3",{id:"basic-core-imports"},"Basic core imports"),Object(a.b)("p",null,"Import essential packages"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Prefix:")," ","['imports', 'workspace-imports-creation']"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"from azureml.core import Workspace, Experiment, Run, RunConfiguration, ComputeTarget, Environment, ScriptRunConfig$1\n$0\n")),Object(a.b)("h3",{id:"pipeline-imports"},"Pipeline Imports"),Object(a.b)("p",null,"Basic imports for pipeline"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Prefix:")," pipeline-imports"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"from azureml.pipeline.core import Pipeline, PipelineData, PipelineParameter\nfrom azureml.pipeline.steps import PythonScriptStep$1\n$0\n")),Object(a.b)("h3",{id:"create-aml-workspace-from-config"},"Create AML Workspace from config"),Object(a.b)("p",null,"Default workspace creation"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Prefix:")," ","['workspace-quick', 'fromconfig', 'from-config']"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"ws = Workspace.from_config()\n$0\n")),Object(a.b)("h3",{id:"create-aml-workspace-from-config-and-auth"},"Create AML Workspace from config and auth"),Object(a.b)("p",null,"Create workspace from config and auth"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Prefix:")," workspace-from-config-auth"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"from azureml.core.authentication import InteractiveLoginAuthentication\nconfig = {'subscription_id':'$1',\n'resource_group':'$2',\n'workspace_name' :'$3'}\nauth = InteractiveLoginAuthentication()\nws = Workspace(**config,auth = auth)\n$0\n")),Object(a.b)("h3",{id:"register-azure-blob-container-from-sas"},"Register Azure Blob Container From SAS"),Object(a.b)("p",null,"Register Azure Blob container to workspace via SAS"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Prefix:")," ","['datastore-register-blob-sas', 'reg-blob-sas']"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"ds = Datastore.register_azure_blob_container(\n    workspace='$1',\n    datastore_name='$2',\n    container_name='$3',\n    account_name='$4',\n    sas_token='$5',\n)\n$0\n")),Object(a.b)("h3",{id:"create-compute-cluster-with-ssh"},"Create Compute Cluster with SSH"),Object(a.b)("p",null,"Create compute cluster with SSH enabled"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Prefix:")," ","['create-compute-cluster-ssh']"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"from azureml.core.compute import AmlCompute\nfrom azureml.core.compute_target import ComputeTargetException\nssh_public_key = '$1'\ncompute_config = AmlCompute.provisioning_configuration(vm_size='$4',min_nodes=$5, max_nodes=$6,admin_username='$7',admin_user_ssh_key=ssh_public_key,vm_priority='${8|lowpriority,dedicated|}',remote_login_port_public_access='Enabled')\ncluster$0 = ComputeTarget.create(workspace=$9, name='$10', compute_config)\n")),Object(a.b)("h3",{id:"aml-template-script-run-config"},"AML Template Script Run Config"),Object(a.b)("p",null,"Template for control plane to launch script on AML"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Prefix:")," ","['scr', 'aml-template-script']"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"from azureml.core import Workspace, Experiment, ScriptRunConfig\n\n# get workspace\nws = Workspace.from_config()\n\n# get/create experiment\nexp = Experiment(ws, '$1')\n\n# set up script run configuration\nconfig = ScriptRunConfig(\n    source_directory='.',\n    script='$2.py',\n    #arguments=['--meaning', 42],\n)\n\n# submit script to AML\nrun = exp.submit(config)\nprint(run.get_portal_url()) # link to ml.azure.com\n$0\n")),Object(a.b)("h3",{id:"aml-template-estimator"},"AML Template Estimator"),Object(a.b)("p",null,"Template for control plane to launch estimator on AML"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Prefix:")," ","['aml-template-estimator']"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"from azureml.core import Workspace, Experiment, ComputeTarget\nfrom azureml.train.estimator import Estimator\n\n# get workspace\nws = Workspace.from_config()\n\n#  get/create experiment\nexp = Experiment(ws, '$1')\n\n# define compute target\ncompute_target = ComputeTarget(ws, '$2')\n\n# set up script run configuration\nconfig = Estimator(\n    source_directory='.',\n    entry_script='$3.py',\n    compute_target=compute_target,\n    #script_params={'--meaning': 42},\n)\n\n# submit script to AML\nrun = exp.submit(config)\nprint(run.get_portal_url()) # link to ml.azure.com\n$0\n")),Object(a.b)("h3",{id:"environment-from-pip"},"Environment-From-Pip"),Object(a.b)("p",null,"Create AML Environment from pip requirements.txt"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Prefix:")," ","['environment-from-pip']"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"from azureml.core import Environment\nenv = Environment.from_pip_requirements(\n    name='$1',\n    file_path='$2',\n)\n\n$0\n")),Object(a.b)("h3",{id:"environment-from-conda-spec"},"Environment-From-Conda-Spec"),Object(a.b)("p",null,"Create AML Environment from conda env.yml"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Prefix:")," ","['environment-from-conda-spec']"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"from azureml.core import Environment\nenv = Environment.from_conda_specification(\n    name='$1',\n    file_path='$2',\n)\n\n$0\n")),Object(a.b)("h3",{id:"environment-from-conda-existing"},"Environment-From-Conda-Existing"),Object(a.b)("p",null,"Create AML Environment from an existing Conda environment"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Prefix:")," ","['environment-from-conda-existing']"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"from azureml.core import Environment\nenv = Environment.from_existing_conda_environment(\n    name='$1',\n    conda_environment_name='$2',\n)\n\n$0\n")),Object(a.b)("h3",{id:"environment"},"Environment"),Object(a.b)("p",null,"Create AML Environment using the SDK"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Prefix:")," ","['environment-from-sdk']"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"from azureml.core import Environment\nfrom azureml.core.conda_dependencies import CondaDependencies\nenv = Environment($1)\n\nconda = CondaDependencies()\n\n# add channels\nconda.add_channel('$2')\n\n# add conda packages\nconda.add_conda_package('$3')\n\n# add pip packages\nconda.add_pip_package('$4')\n$0\n")))}s.isMDXComponent=!0}}]);