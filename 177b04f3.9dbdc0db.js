(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{106:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return u}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),p=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=p(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(t),b=a,u=d["".concat(o,".").concat(b)]||d[b]||m[b]||i;return t?r.a.createElement(u,c(c({ref:n},s),{},{components:t})):r.a.createElement(u,c({ref:n},s))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=b;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=t[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},64:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return p}));var a=t(2),r=t(6),i=(t(0),t(106)),o={title:"Environment"},c={unversionedId:"environment",id:"environment",isDocsHomePage:!1,title:"Environment",description:"Create Environments",source:"@site/docs/environment.md",slug:"/environment",permalink:"/AzureML-CheatSheet/docs/environment",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/environment.md",version:"current",sidebar:"mainSidebar",previous:{title:"Compute Target",permalink:"/AzureML-CheatSheet/docs/compute-targets"},next:{title:"Data",permalink:"/AzureML-CheatSheet/docs/data"}},l=[{value:"Create Environments",id:"create-environments",children:[{value:"From pip",id:"from-pip",children:[]},{value:"From Conda",id:"from-conda",children:[]},{value:"From SDK",id:"from-sdk",children:[]}]},{value:"Registered Environments",id:"registered-environments",children:[]},{value:"Save / Load Environments",id:"save--load-environments",children:[]},{value:"(Advanced) Azure ML Dockerfiles",id:"advanced-azure-ml-dockerfiles",children:[]},{value:"(Advanced) Custom Docker Images",id:"advanced-custom-docker-images",children:[{value:"Requirements for custom image",id:"requirements-for-custom-image",children:[]},{value:"Provide Python packages to the custom image",id:"provide-python-packages-to-the-custom-image",children:[]},{value:"Use Python interpreter from the custom image",id:"use-python-interpreter-from-the-custom-image",children:[]}]},{value:"(Advanced) Environment Variables",id:"advanced-environment-variables",children:[]},{value:"(Advanced) Shell Initialization Script",id:"advanced-shell-initialization-script",children:[]}],s={rightToc:l};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"create-environments"},"Create Environments"),Object(i.b)("p",null,"Easily create, maintain and share Python environments with pip and Conda, or directly from the Python SDK."),Object(i.b)("h3",{id:"from-pip"},"From pip"),Object(i.b)("p",null,"Create Environment from pip ",Object(i.b)("inlineCode",{parentName:"p"},"requirements.txt")," file"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\nenv = Environment.from_pip_requirements('<environment-name>', '<path/to/requirements.txt>')\n")),Object(i.b)("h3",{id:"from-conda"},"From Conda"),Object(i.b)("p",null,"Create Environment from Conda ",Object(i.b)("inlineCode",{parentName:"p"},"env.yml")," file"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\nenv = Environment.from_conda_specifications('<environment-name>', '<path/to/env.yml>')\n")),Object(i.b)("h3",{id:"from-sdk"},"From SDK"),Object(i.b)("p",null,"Use the ",Object(i.b)("inlineCode",{parentName:"p"},"CondaDependencies")," class to create a Python environment in code:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core.conda_dependencies import CondaDependencies\n\nconda = CondaDependencies()\n\n# add channels\nconda.add_channel('pytorch')\n\n# add conda packages\nconda.add_conda_package('python=3.7')\nconda.add_conda_package('pytorch')\nconda.add_conda_package('torchvision')\n\n# add pip packages\nconda.add_pip_package('pyyaml')\n")),Object(i.b)("p",null,"Which can be consumed by an environment as follows."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\nenv = Environment('pytorch')\nenv.python.conda_dependencies = conda\n")),Object(i.b)("p",null,"Converting the conda_dependencies to an ",Object(i.b)("inlineCode",{parentName:"p"},"env.yml")," file later is easy:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"conda.save('env.yml')\n")),Object(i.b)("p",null,"This example will generate the following file:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="env.yml"',title:'"env.yml"'}),"# Conda environment specification. The dependencies defined in this file will\n# be automatically provisioned for runs with userManagedDependencies=False.\n\n# Details about the Conda environment file format:\n# https://conda.io/docs/user-guide/tasks/manage-environments.html#create-env-file-manually\n\nname: project_environment\ndependencies:\n  # The python interpreter version.\n  # Currently Azure ML only supports 3.5.2 and later.\n- python=3.7\n\n- pip:\n    # Required packages for AzureML execution, history, and data preparation.\n  - azureml-defaults\n\n  - pyyaml\n- pytorch\n- torchvision\nchannels:\n- anaconda\n- conda-forge\n- pytorch\n")),Object(i.b)("h2",{id:"registered-environments"},"Registered Environments"),Object(i.b)("p",null,"Register an environment ",Object(i.b)("inlineCode",{parentName:"p"},"env: Environment")," to your workspace to reuse/share with your team."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"env.register(ws)\n")),Object(i.b)("p",null,"To see the registerd Environments already available:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\nenvs: Dict[str, Environment] = Environment.list(ws)\n\nfor name, env in envs.items():\n    print(name)\n# AzureML-Chainer-5.1.0-GPU\n# AzureML-Scikit-learn-0.20.3\n# AzureML-PyTorch-1.1-GPU\n# ...\n")),Object(i.b)("p",null,"This list contains custom environments that have been registered to the workspace as well as a\ncollection of ",Object(i.b)("em",{parentName:"p"},"curated environments")," maintained by the Azure ML team."),Object(i.b)("p",null,"List the conda dependencies for a given environment, for example in 'AzureML-Chainer-5.1.0-GPU':"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"env = envs['AzureML-PyTorch-1.1-GPU']\nprint(env.python.conda_dependencies.serialize_to_string())\n")),Object(i.b)("p",null,"Which returns the following."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="AzureML-PyTorch-1.1-GPU Conda Dependencies"',title:'"AzureML-PyTorch-1.1-GPU',Conda:!0,'Dependencies"':!0}),"channels:\n- conda-forge\ndependencies:\n- python=3.6.2\n- pip:\n  - azureml-core==1.15.0\n  - azureml-defaults==1.15.0\n  - azureml-telemetry==1.15.0\n  - azureml-train-restclients-hyperdrive==1.15.0\n  - azureml-train-core==1.15.0\n  - torch==1.1\n  - torchvision==0.2.1\n  - mkl==2018.0.3\n  - horovod==0.16.1\n  - tensorboard==1.14.0\n  - future==0.17.1\nname: azureml_eb61e39e20e87ad998ae2c88df1dd0af\n")),Object(i.b)("h2",{id:"save--load-environments"},"Save / Load Environments"),Object(i.b)("p",null,"Save an environment to a local directory"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"env.save_to_directory('<path/to/local/directory>', overwrite=True)\n")),Object(i.b)("p",null,"This will generate a directory with two (human-understandable and editable) files:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"azureml_environment.json")," : Metadata including name, version, environment variables and Python and Docker configuration"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"conda_dependencies.yml")," : Standard conda dependencies YAML e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"$ conda create -f conda_dependencies.yml"))),Object(i.b)("p",null,"Load this environment later with"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"env = Environment.load_from_directory('<path/to/local/directory>')\n")),Object(i.b)("h2",{id:"advanced-azure-ml-dockerfiles"},"(Advanced) Azure ML Dockerfiles"),Object(i.b)("p",null,"This section explains how Azure ML builds its docker image based on an ",Object(i.b)("inlineCode",{parentName:"p"},"Environment"),"."),Object(i.b)("p",null,"Consider the following example ",Object(i.b)("inlineCode",{parentName:"p"},"env.yml")," file."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="env.yml"',title:'"env.yml"'}),"name: pytorch\nchannels:\n    - defaults\n    - pytorch\ndependencies:\n    - python=3.7\n    - pytorch\n    - torchvision\n")),Object(i.b)("p",null,"Create and register this as an ",Object(i.b)("inlineCode",{parentName:"p"},"Environment")," in your workspace ",Object(i.b)("inlineCode",{parentName:"p"},"ws"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\nenv = Environment.from_conda_specification('pytorch', 'env.yml')\nenv.register(ws)\n")),Object(i.b)("p",null,"In order to consume this environment in, say, a remote run, Azure ML builds a docker image\nthat creates the corresponding python environment."),Object(i.b)("p",null,"The dockerfile used to build this image is available directly from the environment object."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"details = env.get_image_details(ws)\nprint(details['ingredients']['dockerfile'])\n")),Object(i.b)("p",null,"Which looks like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-docker",metastring:'title="Dockerfile" {1,7-12}',title:'"Dockerfile"',"{1,7-12}":!0}),'FROM mcr.microsoft.com/azureml/intelmpi2018.3-ubuntu16.04:20200821.v1@sha256:8cee6f674276dddb23068d2710da7f7f95b119412cc482675ac79ba45a4acf99\nUSER root\nRUN mkdir -p $HOME/.cache\nWORKDIR /\nCOPY azureml-environment-setup/99brokenproxy /etc/apt/apt.conf.d/\nRUN if dpkg --compare-versions `conda --version | grep -oE \'[^ ]+$\'` lt 4.4.11; then conda install conda==4.4.11; fi\nCOPY azureml-environment-setup/mutated_conda_dependencies.yml azureml-environment-setup/mutated_conda_dependencies.yml\nRUN ldconfig /usr/local/cuda/lib64/stubs && conda env create -p /azureml-envs/azureml_7459a71437df47401c6a369f49fbbdb6 -\nf azureml-environment-setup/mutated_conda_dependencies.yml && rm -rf "$HOME/.cache/pip" && conda clean -aqy && CONDA_ROO\nT_DIR=$(conda info --root) && rm -rf "$CONDA_ROOT_DIR/pkgs" && find "$CONDA_ROOT_DIR" -type d -name __pycache__ -exec rm\n -rf {} + && ldconfig\n# AzureML Conda environment name: azureml_7459a71437df47401c6a369f49fbbdb6\nENV PATH /azureml-envs/azureml_7459a71437df47401c6a369f49fbbdb6/bin:$PATH\nENV AZUREML_CONDA_ENVIRONMENT_PATH /azureml-envs/azureml_7459a71437df47401c6a369f49fbbdb6\nENV LD_LIBRARY_PATH /azureml-envs/azureml_7459a71437df47401c6a369f49fbbdb6/lib:$LD_LIBRARY_PATH\nCOPY azureml-environment-setup/spark_cache.py azureml-environment-setup/log4j.properties /azureml-environment-setup/\nRUN if [ $SPARK_HOME ]; then /bin/bash -c \'$SPARK_HOME/bin/spark-submit  /azureml-environment-setup/spark_cache.py\'; fi\nENV AZUREML_ENVIRONMENT_IMAGE True\nCMD ["bash"]\n')),Object(i.b)("p",null,"Notice:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The base image here is a standard image maintained by Azure ML. Dockerfiles for all base images are available on\ngithub: ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/Azure/AzureML-Containers"}),"https://github.com/Azure/AzureML-Containers")),Object(i.b)("li",{parentName:"ul"},"The dockerfile references ",Object(i.b)("inlineCode",{parentName:"li"},"mutated_conda_dependencies.yml")," to build the Python environment via Conda.")),Object(i.b)("p",null,"Get the contents of ",Object(i.b)("inlineCode",{parentName:"p"},"mutated_conda_dependencies.yml")," from the environment:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"print(env.python.conda_dependencies.serialize_to_string())\n")),Object(i.b)("p",null,"Which looks like"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash",metastring:'title="mutated_conda_dependencies.yml"',title:'"mutated_conda_dependencies.yml"'}),"channels:\n    - defaults\n    - pytorch\ndependencies:\n    - python=3.7\n    - pytorch\n    - torchvision\nname: azureml_7459a71437df47401c6a369f49fbbdb6\n")),Object(i.b)("h2",{id:"advanced-custom-docker-images"},"(Advanced) Custom Docker Images"),Object(i.b)("p",null,"By default, Azure ML will create your Python environment inside a Docker image it maintains."),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"No secrets")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"This default image is not a secret. For example, you can see the Dockerfile used to create\nit with the following:"),Object(i.b)("pre",{parentName:"div"},Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Environment\nenv = Environment('no-secrets')             # create new Environment\nenv.register(ws)                            # register to the workspace\ndetails = env.get_image_details(ws)\nprint(details['ingredients']['dockerfile'])\n")),Object(i.b)("p",{parentName:"div"},"Dockerfiles for all base images are available on github: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Azure/AzureML-Containers"}),"https://github.com/Azure/AzureML-Containers")))),Object(i.b)("p",null,"You may chose to use your own Docker image. In this case there are two options:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Install python packages on top of the custom base docker image provided"),Object(i.b)("li",{parentName:"ul"},"Install python packages within the custom base docker image provided")),Object(i.b)("h3",{id:"requirements-for-custom-image"},"Requirements for custom image"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Conda"),": Azure ML uses Conda to manage python environments by default"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"libfuse"),": Required when using ",Object(i.b)("inlineCode",{parentName:"li"},"Dataset")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Openmpi"),": Required for distributed runs"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"nvidia/cuda"),": (Recommended) For GPU-based training build image from ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://hub.docker.com/r/nvidia/cuda"}),"nvidia/cuda"))),Object(i.b)("h3",{id:"provide-python-packages-to-the-custom-image"},"Provide Python packages to the custom image"),Object(i.b)("p",null,"In this case we will use pip, Conda or the SDK to manage our Python packages as above, resulting\nin ",Object(i.b)("inlineCode",{parentName:"p"},"env: Environment"),". For example,"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"env = Environment.from_pip_requirements('nlp', 'requirements.txt')\n")),Object(i.b)("p",null,"Assuming you have a Dockerfile to hand you can specify the following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'# just as an example\nenv.docker.base_image = None                    # translation: do not use your default base image\nenv.docker.base_dockerfile = "./Dockerfile"     # translation: use my Dockerfile as base instead\n')),Object(i.b)("p",null,"When you use this environment in a compute target it will build a Docker image as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-docker"}),"###\nContents of your base dockerfile\n###\n\n###\nBuild the Python dependencies as specified in env object\n###\n")),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Again, you can see the exact contents of this Dockerfile used by running"),Object(i.b)("pre",{parentName:"div"},Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"details = env.get_image_details(ws)\nprint(details['ingredients']['dockerfile'])\n")))),Object(i.b)("h3",{id:"use-python-interpreter-from-the-custom-image"},"Use Python interpreter from the custom image"),Object(i.b)("p",null,"Usually your custom Docker image has its own Python environment already set up."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-docker",metastring:'title="Dockerfile"',title:'"Dockerfile"'}),'FROM mcr.microsoft.com/azureml/base:intelmpi2018.3-ubuntu16.04\nRUN conda update -n base -c defaults conda\nRUN [ "/bin/bash", "-c", "conda create -n pytorch Python=3.6.2 && source activate amlbert && conda install pip"]\nRUN /opt/miniconda/envs/pytorch/bin/pip install pytorch\n')),Object(i.b)("p",null,"In this case you need to:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Indicate that you are managing your own Python dependencies: ",Object(i.b)("inlineCode",{parentName:"li"},"user_managed_dependencies=True")),Object(i.b)("li",{parentName:"ul"},"Specify the path to your Python interpreter: ",Object(i.b)("inlineCode",{parentName:"li"},"interpreter_path=<path>"))),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"env = Environment('pytorch')    # create an Environment called 'pytorch'\n\n# set up custom docker image\nenv.docker.base_image = None\nenv.docker.base_dockerfile = \"./Dockerfile\"\n\n# indicate how to run Python\nenv.python.user_managed_dependencies=True\nenv.python.interpreter_path = \"/opt/miniconda/bin/python\"\n")),Object(i.b)("h2",{id:"advanced-environment-variables"},"(Advanced) Environment Variables"),Object(i.b)("p",null,"To set environment variables use the ",Object(i.b)("inlineCode",{parentName:"p"},"environment_variables: Dict[str, str]")," attribute. Environment variables\nare set on the process where the user script is executed."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"env = Environment('example')\nenv.environment_variables['EXAMPLE_ENV_VAR'] = 'EXAMPLE_VALUE'\n")),Object(i.b)("h2",{id:"advanced-shell-initialization-script"},"(Advanced) Shell Initialization Script"),Object(i.b)("p",null,"A useful pattern is to run shell scripts on Azure ML compute to prepare the nodes."),Object(i.b)("p",null,"We create two shell scripts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"setup.sh")," : This will run only on local_rank 0 process."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"run.sh")," : This will run on each process.")),Object(i.b)("p",null,"These scripts will run ahead of our main python call to ",Object(i.b)("inlineCode",{parentName:"p"},"train.py"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"src/\n  setup.sh              # init local_rank 0\n  run.sh                # init for each rank\n  requirements.txt      # pip requirements\n  download_data.py      # utility script to download training data\n  train.py              # model training script\n  aml_wrapper.py        # thin wrapper calling setup.sh and run.sh\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash",metastring:'title="setup.sh"',title:'"setup.sh"'}),"pip install -r requirements.txt\npython download_data.py --output_dir /tmp/data\n")),Object(i.b)("p",null,"This script runs ",Object(i.b)("inlineCode",{parentName:"p"},"download_data.py")," which downloads training data to the specified output\ndirectory ",Object(i.b)("inlineCode",{parentName:"p"},"/tmp/data"),"."),Object(i.b)("p",null,"In this example the data should be downloaded once per node in the compute cluster (not once\nper process!)."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash",metastring:'title="run.py"',title:'"run.py"'}),"python train.py --training_data /tmp/data --learning_rate 1e-6\n")),Object(i.b)("p",null,"This is the main call to the training script and needs to be called by each process. The data\ndownloaded by ",Object(i.b)("inlineCode",{parentName:"p"},"download_data.py")," is referenced as a command-line argument."),Object(i.b)("p",null,"Finally, prepare a wrapper script to execute the above."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python",metastring:'title="aml_wrapper.py"',title:'"aml_wrapper.py"'}),'#!/usr/bin/env python\nimport os\n\nif "OMPI_COMM_WORLD_LOCAL_RANK" in os.environ:\n    if os.environ["OMPI_COMM_WORLD_LOCAL_RANK"] == "0":\n        os.system(\'./setup.sh\')\n\nos.system(\'./run.sh\')\n')),Object(i.b)("p",null,"Submit this to a ",Object(i.b)("inlineCode",{parentName:"p"},"ComputeTarget")," with ",Object(i.b)("inlineCode",{parentName:"p"},"ScriptRunConfig"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"from azureml.core import Workspace, ComputeTarget, ScriptRunConfig\n\nws = Workspace.from_config()\ncompute_target = ws.compute_targets['<compute-target-name>']\n\nconfig = ScriptRunConfig(\n    source_directory='src',\n    script='aml_wrapper.py',\n    compute_target=compute_target,\n)\n")))}p.isMDXComponent=!0}}]);